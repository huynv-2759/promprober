// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: github.com/sun-asterisk-research/cloudprober/probes/http/proto/config.proto

package proto

import (
	proto1 "github.com/cloudprober/cloudprober/probes/proto"
	proto "github.com/sun-asterisk-research/cloudprober/common/tls/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProbeConf_IPProtocol int32

const (
	ProbeConf_ip4 ProbeConf_IPProtocol = 1
	ProbeConf_ip6 ProbeConf_IPProtocol = 2
)

// Enum value maps for ProbeConf_IPProtocol.
var (
	ProbeConf_IPProtocol_name = map[int32]string{
		1: "ip4",
		2: "ip6",
	}
	ProbeConf_IPProtocol_value = map[string]int32{
		"ip4": 1,
		"ip6": 2,
	}
)

func (x ProbeConf_IPProtocol) Enum() *ProbeConf_IPProtocol {
	p := new(ProbeConf_IPProtocol)
	*p = x
	return p
}

func (x ProbeConf_IPProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProbeConf_IPProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_sun_asterisk_research_cloudprober_probes_http_proto_config_proto_enumTypes[0].Descriptor()
}

func (ProbeConf_IPProtocol) Type() protoreflect.EnumType {
	return &file_github_com_sun_asterisk_research_cloudprober_probes_http_proto_config_proto_enumTypes[0]
}

func (x ProbeConf_IPProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProbeConf_IPProtocol) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProbeConf_IPProtocol(num)
	return nil
}

// Deprecated: Use ProbeConf_IPProtocol.Descriptor instead.
func (ProbeConf_IPProtocol) EnumDescriptor() ([]byte, []int) {
	return file_github_com_sun_asterisk_research_cloudprober_probes_http_proto_config_proto_rawDescGZIP(), []int{0, 0}
}

type ProbeConf_HTTPMethod int32

const (
	ProbeConf_GET     ProbeConf_HTTPMethod = 0
	ProbeConf_POST    ProbeConf_HTTPMethod = 1
	ProbeConf_PUT     ProbeConf_HTTPMethod = 2
	ProbeConf_HEAD    ProbeConf_HTTPMethod = 3
	ProbeConf_DELETE  ProbeConf_HTTPMethod = 4
	ProbeConf_PATCH   ProbeConf_HTTPMethod = 5
	ProbeConf_OPTIONS ProbeConf_HTTPMethod = 6
)

// Enum value maps for ProbeConf_HTTPMethod.
var (
	ProbeConf_HTTPMethod_name = map[int32]string{
		0: "GET",
		1: "POST",
		2: "PUT",
		3: "HEAD",
		4: "DELETE",
		5: "PATCH",
		6: "OPTIONS",
	}
	ProbeConf_HTTPMethod_value = map[string]int32{
		"GET":     0,
		"POST":    1,
		"PUT":     2,
		"HEAD":    3,
		"DELETE":  4,
		"PATCH":   5,
		"OPTIONS": 6,
	}
)

func (x ProbeConf_HTTPMethod) Enum() *ProbeConf_HTTPMethod {
	p := new(ProbeConf_HTTPMethod)
	*p = x
	return p
}

func (x ProbeConf_HTTPMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProbeConf_HTTPMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_sun_asterisk_research_cloudprober_probes_http_proto_config_proto_enumTypes[1].Descriptor()
}

func (ProbeConf_HTTPMethod) Type() protoreflect.EnumType {
	return &file_github_com_sun_asterisk_research_cloudprober_probes_http_proto_config_proto_enumTypes[1]
}

func (x ProbeConf_HTTPMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProbeConf_HTTPMethod) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProbeConf_HTTPMethod(num)
	return nil
}

// Deprecated: Use ProbeConf_HTTPMethod.Descriptor instead.
func (ProbeConf_HTTPMethod) EnumDescriptor() ([]byte, []int) {
	return file_github_com_sun_asterisk_research_cloudprober_probes_http_proto_config_proto_rawDescGZIP(), []int{0, 1}
}

type ProbeConf_CompressionAlgo int32

const (
	ProbeConf_gzip     ProbeConf_CompressionAlgo = 1
	ProbeConf_br       ProbeConf_CompressionAlgo = 2
	ProbeConf_deflate  ProbeConf_CompressionAlgo = 3
	ProbeConf_identity ProbeConf_CompressionAlgo = 4
)

// Enum value maps for ProbeConf_CompressionAlgo.
var (
	ProbeConf_CompressionAlgo_name = map[int32]string{
		1: "gzip",
		2: "br",
		3: "deflate",
		4: "identity",
	}
	ProbeConf_CompressionAlgo_value = map[string]int32{
		"gzip":     1,
		"br":       2,
		"deflate":  3,
		"identity": 4,
	}
)

func (x ProbeConf_CompressionAlgo) Enum() *ProbeConf_CompressionAlgo {
	p := new(ProbeConf_CompressionAlgo)
	*p = x
	return p
}

func (x ProbeConf_CompressionAlgo) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProbeConf_CompressionAlgo) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_sun_asterisk_research_cloudprober_probes_http_proto_config_proto_enumTypes[2].Descriptor()
}

func (ProbeConf_CompressionAlgo) Type() protoreflect.EnumType {
	return &file_github_com_sun_asterisk_research_cloudprober_probes_http_proto_config_proto_enumTypes[2]
}

func (x ProbeConf_CompressionAlgo) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProbeConf_CompressionAlgo) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProbeConf_CompressionAlgo(num)
	return nil
}

// Deprecated: Use ProbeConf_CompressionAlgo.Descriptor instead.
func (ProbeConf_CompressionAlgo) EnumDescriptor() ([]byte, []int) {
	return file_github_com_sun_asterisk_research_cloudprober_probes_http_proto_config_proto_rawDescGZIP(), []int{0, 2}
}

type ProbeConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidStatusCode              *string                    `protobuf:"bytes,1,opt,name=valid_status_code,json=validStatusCode,def=2xx" json:"valid_status_code,omitempty"`
	ValidHttpVersions            *string                    `protobuf:"bytes,2,opt,name=valid_http_versions,json=validHttpVersions" json:"valid_http_versions,omitempty"`
	Method                       *ProbeConf_HTTPMethod      `protobuf:"varint,3,opt,name=method,enum=ProbeConf_HTTPMethod,def=0" json:"method,omitempty"`
	Secure                       *bool                      `protobuf:"varint,4,opt,name=secure,def=0" json:"secure,omitempty"`
	Headers                      map[string]string          `protobuf:"bytes,5,rep,name=headers" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	BodySizeLimit                *string                    `protobuf:"bytes,6,opt,name=body_size_limit,json=bodySizeLimit" json:"body_size_limit,omitempty"`
	Compression                  *ProbeConf_CompressionAlgo `protobuf:"varint,7,opt,name=compression,enum=ProbeConf_CompressionAlgo" json:"compression,omitempty"`
	FollowRedirects              *bool                      `protobuf:"varint,8,opt,name=follow_redirects,json=followRedirects,def=1" json:"follow_redirects,omitempty"`
	FailIfSsl                    *bool                      `protobuf:"varint,9,opt,name=fail_if_ssl,json=failIfSsl,def=0" json:"fail_if_ssl,omitempty"`
	FailIfNotSsl                 *bool                      `protobuf:"varint,10,opt,name=fail_if_not_ssl,json=failIfNotSsl,def=0" json:"fail_if_not_ssl,omitempty"`
	FailIfBodyMatchesRegexp      *string                    `protobuf:"bytes,11,opt,name=fail_if_body_matches_regexp,json=failIfBodyMatchesRegexp" json:"fail_if_body_matches_regexp,omitempty"`
	FailIfBodyNotMatchesRegexp   *string                    `protobuf:"bytes,12,opt,name=fail_if_body_not_matches_regexp,json=failIfBodyNotMatchesRegexp" json:"fail_if_body_not_matches_regexp,omitempty"`
	FailIfHeaderMatchesRegexp    *string                    `protobuf:"bytes,13,opt,name=fail_if_header_matches_regexp,json=failIfHeaderMatchesRegexp" json:"fail_if_header_matches_regexp,omitempty"`
	FailIfHeaderNotMatchesRegexp *string                    `protobuf:"bytes,14,opt,name=fail_if_header_not_matches_regexp,json=failIfHeaderNotMatchesRegexp" json:"fail_if_header_not_matches_regexp,omitempty"`
	BasicAuth                    *ProbeConf_BasicAuth       `protobuf:"bytes,15,opt,name=basic_auth,json=basicAuth" json:"basic_auth,omitempty"`
	BearerToken                  *string                    `protobuf:"bytes,16,opt,name=bearer_token,json=bearerToken" json:"bearer_token,omitempty"`
	ProxyUrl                     *string                    `protobuf:"bytes,17,opt,name=proxy_url,json=proxyUrl" json:"proxy_url,omitempty"`
	TlsConfig                    *proto.TLSConfig           `protobuf:"bytes,18,opt,name=tls_config,json=tlsConfig" json:"tls_config,omitempty"`
	PreferredIpProtocol          *ProbeConf_IPProtocol      `protobuf:"varint,19,opt,name=preferred_ip_protocol,json=preferredIpProtocol,enum=ProbeConf_IPProtocol,def=2" json:"preferred_ip_protocol,omitempty"`
	IpProtocolFallback           *bool                      `protobuf:"varint,20,opt,name=ip_protocol_fallback,json=ipProtocolFallback,def=1" json:"ip_protocol_fallback,omitempty"`
	EnableHttp2                  *bool                      `protobuf:"varint,21,opt,name=enable_http2,json=enableHttp2,def=1" json:"enable_http2,omitempty"`
	Body                         *string                    `protobuf:"bytes,22,opt,name=body" json:"body,omitempty"`
	Path                         *string                    `protobuf:"bytes,23,opt,name=path" json:"path,omitempty"`
}

// Default values for ProbeConf fields.
const (
	Default_ProbeConf_ValidStatusCode     = string("2xx")
	Default_ProbeConf_Method              = ProbeConf_GET
	Default_ProbeConf_Secure              = bool(false)
	Default_ProbeConf_FollowRedirects     = bool(true)
	Default_ProbeConf_FailIfSsl           = bool(false)
	Default_ProbeConf_FailIfNotSsl        = bool(false)
	Default_ProbeConf_PreferredIpProtocol = ProbeConf_ip6
	Default_ProbeConf_IpProtocolFallback  = bool(true)
	Default_ProbeConf_EnableHttp2         = bool(true)
)

func (x *ProbeConf) Reset() {
	*x = ProbeConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_sun_asterisk_research_cloudprober_probes_http_proto_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProbeConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProbeConf) ProtoMessage() {}

func (x *ProbeConf) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_sun_asterisk_research_cloudprober_probes_http_proto_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProbeConf.ProtoReflect.Descriptor instead.
func (*ProbeConf) Descriptor() ([]byte, []int) {
	return file_github_com_sun_asterisk_research_cloudprober_probes_http_proto_config_proto_rawDescGZIP(), []int{0}
}

func (x *ProbeConf) GetValidStatusCode() string {
	if x != nil && x.ValidStatusCode != nil {
		return *x.ValidStatusCode
	}
	return Default_ProbeConf_ValidStatusCode
}

func (x *ProbeConf) GetValidHttpVersions() string {
	if x != nil && x.ValidHttpVersions != nil {
		return *x.ValidHttpVersions
	}
	return ""
}

func (x *ProbeConf) GetMethod() ProbeConf_HTTPMethod {
	if x != nil && x.Method != nil {
		return *x.Method
	}
	return Default_ProbeConf_Method
}

func (x *ProbeConf) GetSecure() bool {
	if x != nil && x.Secure != nil {
		return *x.Secure
	}
	return Default_ProbeConf_Secure
}

func (x *ProbeConf) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *ProbeConf) GetBodySizeLimit() string {
	if x != nil && x.BodySizeLimit != nil {
		return *x.BodySizeLimit
	}
	return ""
}

func (x *ProbeConf) GetCompression() ProbeConf_CompressionAlgo {
	if x != nil && x.Compression != nil {
		return *x.Compression
	}
	return ProbeConf_gzip
}

func (x *ProbeConf) GetFollowRedirects() bool {
	if x != nil && x.FollowRedirects != nil {
		return *x.FollowRedirects
	}
	return Default_ProbeConf_FollowRedirects
}

func (x *ProbeConf) GetFailIfSsl() bool {
	if x != nil && x.FailIfSsl != nil {
		return *x.FailIfSsl
	}
	return Default_ProbeConf_FailIfSsl
}

func (x *ProbeConf) GetFailIfNotSsl() bool {
	if x != nil && x.FailIfNotSsl != nil {
		return *x.FailIfNotSsl
	}
	return Default_ProbeConf_FailIfNotSsl
}

func (x *ProbeConf) GetFailIfBodyMatchesRegexp() string {
	if x != nil && x.FailIfBodyMatchesRegexp != nil {
		return *x.FailIfBodyMatchesRegexp
	}
	return ""
}

func (x *ProbeConf) GetFailIfBodyNotMatchesRegexp() string {
	if x != nil && x.FailIfBodyNotMatchesRegexp != nil {
		return *x.FailIfBodyNotMatchesRegexp
	}
	return ""
}

func (x *ProbeConf) GetFailIfHeaderMatchesRegexp() string {
	if x != nil && x.FailIfHeaderMatchesRegexp != nil {
		return *x.FailIfHeaderMatchesRegexp
	}
	return ""
}

func (x *ProbeConf) GetFailIfHeaderNotMatchesRegexp() string {
	if x != nil && x.FailIfHeaderNotMatchesRegexp != nil {
		return *x.FailIfHeaderNotMatchesRegexp
	}
	return ""
}

func (x *ProbeConf) GetBasicAuth() *ProbeConf_BasicAuth {
	if x != nil {
		return x.BasicAuth
	}
	return nil
}

func (x *ProbeConf) GetBearerToken() string {
	if x != nil && x.BearerToken != nil {
		return *x.BearerToken
	}
	return ""
}

func (x *ProbeConf) GetProxyUrl() string {
	if x != nil && x.ProxyUrl != nil {
		return *x.ProxyUrl
	}
	return ""
}

func (x *ProbeConf) GetTlsConfig() *proto.TLSConfig {
	if x != nil {
		return x.TlsConfig
	}
	return nil
}

func (x *ProbeConf) GetPreferredIpProtocol() ProbeConf_IPProtocol {
	if x != nil && x.PreferredIpProtocol != nil {
		return *x.PreferredIpProtocol
	}
	return Default_ProbeConf_PreferredIpProtocol
}

func (x *ProbeConf) GetIpProtocolFallback() bool {
	if x != nil && x.IpProtocolFallback != nil {
		return *x.IpProtocolFallback
	}
	return Default_ProbeConf_IpProtocolFallback
}

func (x *ProbeConf) GetEnableHttp2() bool {
	if x != nil && x.EnableHttp2 != nil {
		return *x.EnableHttp2
	}
	return Default_ProbeConf_EnableHttp2
}

func (x *ProbeConf) GetBody() string {
	if x != nil && x.Body != nil {
		return *x.Body
	}
	return ""
}

func (x *ProbeConf) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

type ProbeConf_BasicAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username *string `protobuf:"bytes,1,req,name=username" json:"username,omitempty"`
	Password *string `protobuf:"bytes,2,req,name=password" json:"password,omitempty"`
}

func (x *ProbeConf_BasicAuth) Reset() {
	*x = ProbeConf_BasicAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_sun_asterisk_research_cloudprober_probes_http_proto_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProbeConf_BasicAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProbeConf_BasicAuth) ProtoMessage() {}

func (x *ProbeConf_BasicAuth) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_sun_asterisk_research_cloudprober_probes_http_proto_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProbeConf_BasicAuth.ProtoReflect.Descriptor instead.
func (*ProbeConf_BasicAuth) Descriptor() ([]byte, []int) {
	return file_github_com_sun_asterisk_research_cloudprober_probes_http_proto_config_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ProbeConf_BasicAuth) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *ProbeConf_BasicAuth) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

var file_github_com_sun_asterisk_research_cloudprober_probes_http_proto_config_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*proto1.ProbeDef)(nil),
		ExtensionType: (*ProbeConf)(nil),
		Field:         200,
		Name:          "http_probe",
		Tag:           "bytes,200,opt,name=http_probe",
		Filename:      "github.com/sun-asterisk-research/cloudprober/probes/http/proto/config.proto",
	},
}

// Extension fields to proto1.ProbeDef.
var (
	// optional ProbeConf http_probe = 200;
	E_HttpProbe = &file_github_com_sun_asterisk_research_cloudprober_probes_http_proto_config_proto_extTypes[0]
)

var File_github_com_sun_asterisk_research_cloudprober_probes_http_proto_config_proto protoreflect.FileDescriptor

var file_github_com_sun_asterisk_research_cloudprober_probes_http_proto_config_proto_rawDesc = []byte{
	0x0a, 0x4b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x75, 0x6e,
	0x2d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x69, 0x73, 0x6b, 0x2d, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x72, 0x2f, 0x70,
	0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3c, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70,
	0x72, 0x6f, 0x62, 0x65, 0x72, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x62, 0x65,
	0x72, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x4a, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x75, 0x6e, 0x2d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x69, 0x73, 0x6b, 0x2d, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x74, 0x6c, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa9, 0x0b, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x62,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x2f, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x3a, 0x03, 0x32, 0x78, 0x78, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f,
	0x68, 0x74, 0x74, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x48, 0x74, 0x74, 0x70, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3a, 0x03, 0x47,
	0x45, 0x54, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1d, 0x0a, 0x06, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x06, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x50, 0x72, 0x6f,
	0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x50, 0x72, 0x6f, 0x62,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x10, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72,
	0x75, 0x65, 0x52, 0x0f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x66, 0x5f, 0x73,
	0x73, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x09, 0x66, 0x61, 0x69, 0x6c, 0x49, 0x66, 0x53, 0x73, 0x6c, 0x12, 0x2c, 0x0a, 0x0f, 0x66, 0x61,
	0x69, 0x6c, 0x5f, 0x69, 0x66, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x73, 0x73, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c,
	0x49, 0x66, 0x4e, 0x6f, 0x74, 0x53, 0x73, 0x6c, 0x12, 0x3c, 0x0a, 0x1b, 0x66, 0x61, 0x69, 0x6c,
	0x5f, 0x69, 0x66, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x66,
	0x61, 0x69, 0x6c, 0x49, 0x66, 0x42, 0x6f, 0x64, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x43, 0x0a, 0x1f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x69,
	0x66, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1a, 0x66, 0x61, 0x69, 0x6c, 0x49, 0x66, 0x42, 0x6f, 0x64, 0x79, 0x4e, 0x6f, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x40, 0x0a, 0x1d, 0x66,
	0x61, 0x69, 0x6c, 0x5f, 0x69, 0x66, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x19, 0x66, 0x61, 0x69, 0x6c, 0x49, 0x66, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x47, 0x0a,
	0x21, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x66, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f,
	0x6e, 0x6f, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x65,
	0x78, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x66, 0x61, 0x69, 0x6c, 0x49, 0x66,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x33, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x50, 0x72, 0x6f,
	0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68,
	0x52, 0x09, 0x62, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x62,
	0x65, 0x61, 0x72, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x34, 0x0a, 0x0a, 0x74,
	0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x6c, 0x73, 0x2e, 0x54, 0x4c, 0x53,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x74, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x4e, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x69,
	0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x49, 0x50, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x3a, 0x03, 0x69, 0x70, 0x36, 0x52, 0x13, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x49, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x12, 0x36, 0x0a, 0x14, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x12, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x27, 0x0a, 0x0c, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x32, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x74, 0x74,
	0x70, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x1a, 0x43, 0x0a, 0x09, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a,
	0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x1e, 0x0a, 0x0a, 0x49,
	0x50, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x07, 0x0a, 0x03, 0x69, 0x70, 0x34,
	0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x69, 0x70, 0x36, 0x10, 0x02, 0x22, 0x56, 0x0a, 0x0a, 0x48,
	0x54, 0x54, 0x50, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x50, 0x55, 0x54, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x45, 0x41, 0x44, 0x10, 0x03, 0x12,
	0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x50,
	0x41, 0x54, 0x43, 0x48, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x53, 0x10, 0x06, 0x22, 0x3e, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x12, 0x08, 0x0a, 0x04, 0x67, 0x7a, 0x69, 0x70, 0x10, 0x01,
	0x12, 0x06, 0x0a, 0x02, 0x62, 0x72, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x6c,
	0x61, 0x74, 0x65, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x10, 0x04, 0x3a, 0x48, 0x0a, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x62,
	0x65, 0x12, 0x1c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x44, 0x65, 0x66, 0x18,
	0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x42, 0x40, 0x5a,
	0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x75, 0x6e, 0x2d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x69, 0x73, 0x6b, 0x2d, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x72, 0x2f, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x73, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_github_com_sun_asterisk_research_cloudprober_probes_http_proto_config_proto_rawDescOnce sync.Once
	file_github_com_sun_asterisk_research_cloudprober_probes_http_proto_config_proto_rawDescData = file_github_com_sun_asterisk_research_cloudprober_probes_http_proto_config_proto_rawDesc
)

func file_github_com_sun_asterisk_research_cloudprober_probes_http_proto_config_proto_rawDescGZIP() []byte {
	file_github_com_sun_asterisk_research_cloudprober_probes_http_proto_config_proto_rawDescOnce.Do(func() {
		file_github_com_sun_asterisk_research_cloudprober_probes_http_proto_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_sun_asterisk_research_cloudprober_probes_http_proto_config_proto_rawDescData)
	})
	return file_github_com_sun_asterisk_research_cloudprober_probes_http_proto_config_proto_rawDescData
}

var file_github_com_sun_asterisk_research_cloudprober_probes_http_proto_config_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_github_com_sun_asterisk_research_cloudprober_probes_http_proto_config_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_github_com_sun_asterisk_research_cloudprober_probes_http_proto_config_proto_goTypes = []interface{}{
	(ProbeConf_IPProtocol)(0),      // 0: ProbeConf.IPProtocol
	(ProbeConf_HTTPMethod)(0),      // 1: ProbeConf.HTTPMethod
	(ProbeConf_CompressionAlgo)(0), // 2: ProbeConf.CompressionAlgo
	(*ProbeConf)(nil),              // 3: ProbeConf
	(*ProbeConf_BasicAuth)(nil),    // 4: ProbeConf.BasicAuth
	nil,                            // 5: ProbeConf.HeadersEntry
	(*proto.TLSConfig)(nil),        // 6: common.tls.TLSConfig
	(*proto1.ProbeDef)(nil),        // 7: cloudprober.probes.ProbeDef
}
var file_github_com_sun_asterisk_research_cloudprober_probes_http_proto_config_proto_depIdxs = []int32{
	1, // 0: ProbeConf.method:type_name -> ProbeConf.HTTPMethod
	5, // 1: ProbeConf.headers:type_name -> ProbeConf.HeadersEntry
	2, // 2: ProbeConf.compression:type_name -> ProbeConf.CompressionAlgo
	4, // 3: ProbeConf.basic_auth:type_name -> ProbeConf.BasicAuth
	6, // 4: ProbeConf.tls_config:type_name -> common.tls.TLSConfig
	0, // 5: ProbeConf.preferred_ip_protocol:type_name -> ProbeConf.IPProtocol
	7, // 6: http_probe:extendee -> cloudprober.probes.ProbeDef
	3, // 7: http_probe:type_name -> ProbeConf
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	7, // [7:8] is the sub-list for extension type_name
	6, // [6:7] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_github_com_sun_asterisk_research_cloudprober_probes_http_proto_config_proto_init() }
func file_github_com_sun_asterisk_research_cloudprober_probes_http_proto_config_proto_init() {
	if File_github_com_sun_asterisk_research_cloudprober_probes_http_proto_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_sun_asterisk_research_cloudprober_probes_http_proto_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProbeConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_sun_asterisk_research_cloudprober_probes_http_proto_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProbeConf_BasicAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_sun_asterisk_research_cloudprober_probes_http_proto_config_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   3,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_github_com_sun_asterisk_research_cloudprober_probes_http_proto_config_proto_goTypes,
		DependencyIndexes: file_github_com_sun_asterisk_research_cloudprober_probes_http_proto_config_proto_depIdxs,
		EnumInfos:         file_github_com_sun_asterisk_research_cloudprober_probes_http_proto_config_proto_enumTypes,
		MessageInfos:      file_github_com_sun_asterisk_research_cloudprober_probes_http_proto_config_proto_msgTypes,
		ExtensionInfos:    file_github_com_sun_asterisk_research_cloudprober_probes_http_proto_config_proto_extTypes,
	}.Build()
	File_github_com_sun_asterisk_research_cloudprober_probes_http_proto_config_proto = out.File
	file_github_com_sun_asterisk_research_cloudprober_probes_http_proto_config_proto_rawDesc = nil
	file_github_com_sun_asterisk_research_cloudprober_probes_http_proto_config_proto_goTypes = nil
	file_github_com_sun_asterisk_research_cloudprober_probes_http_proto_config_proto_depIdxs = nil
}
